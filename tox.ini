# tox (https://tox.readthedocs.io/) is a tool for running tests
# in multiple virtualenvs. This configuration file will run the
# test suite on all supported python versions. To use it, "pip install tox"
# and then run "tox" from this directory.

# This post discusses how to specify patterns for testing specific tests
# https://stackoverflow.com/questions/36456920/is-there-a-way-to-specify-which-pytest-tests-to-run-from-a-file

[tox]
envlist = py38

# install CUDA 10.2 Torch
[ubuntu_gpu]
install_command =
    pip install --pre -f https://download.pytorch.org/whl/nightly/cu102/torch_nightly.html {opts} {packages} --progress-bar off

[pytest]
addopts = --verbose -d --tx popen --cov=reagent --cov-report=xml --cov-append --junitxml={envlogdir}/junit-{envname}.xml

# Refer to https://docs.pytest.org/en/stable/example/markers.html
# for how we include/exclude tests in pytest

[testenv]
# Install the latest pip, setuptools, wheel; this is needed for downloading opencv-python wheel,
# instead of building from source (which is super slow).
download = true
extras =
    gym
    test
install_command =
    pip install --pre -f https://download.pytorch.org/whl/nightly/cpu/torch_nightly.html {opts} {packages} --progress-bar off
commands =
    pytest -n2 -m "(not serial) and (not seq2slate_long)"
    pytest -n0 -m "serial"

[testenv:circleci_misc_unittest]
install_command = {[ubuntu_gpu]install_command}
commands =
    pytest reagent/test -n2 -m "not serial" --ignore=reagent/test/ranking/ --ignore=reagent/test/training/ --ignore=reagent/test/prediction/ --ignore=reagent/test/world_model/
    pytest reagent/test -n0 -m "serial" --ignore=reagent/test/ranking/ --ignore=reagent/test/training/ --ignore=reagent/test/prediction/ --ignore=reagent/test/world_model/


[testenv:circleci_gym_replay_buffer_1_cpu_unittest]
commands =
    pytest reagent/gym/tests -n2 -m "not serial" -k "test_replay_buffer_gym_cpu_1"


[testenv:circleci_gym_replay_buffer_2_cpu_unittest]
commands =
    pytest reagent/gym/tests -n2 -m "not serial" -k "test_replay_buffer_gym_cpu_2"


# all cpu tests in reagent/gym/tests except test_replay_buffer_gym_cpu_x
[testenv:circleci_gym_cpu_unittest]
commands =
    pytest reagent/gym/tests -n2 -m "not serial" -k "not test_replay_buffer_gym_cpu"


[testenv:circleci_gym_replay_buffer_1_gpu_unittest]
install_command = {[ubuntu_gpu]install_command}
commands =
    pytest reagent/gym/tests -n0 -m "serial" -k "test_replay_buffer_gym_gpu_1"


[testenv:circleci_gym_replay_buffer_2_gpu_unittest]
install_command = {[ubuntu_gpu]install_command}
commands =
    pytest reagent/gym/tests -n0 -m "serial" -k "test_replay_buffer_gym_gpu_2"


# all gpu tests in reagent/gym/tests except test_replay_buffer_gym_gpu_x
[testenv:circleci_gym_gpu_unittest]
install_command = {[ubuntu_gpu]install_command}
commands =
    pytest reagent/gym/tests -n0 -m "serial" -k "not test_replay_buffer_gym_gpu"


[testenv:circleci_ranking_unittest]
install_command = {[ubuntu_gpu]install_command}
commands =
    pytest reagent/test/ranking -n2


[testenv:circleci_training_unittest]
install_command = {[ubuntu_gpu]install_command}
commands =
    pytest reagent/test/training -n2


[testenv:circleci_prediction_unittest]
install_command = {[ubuntu_gpu]install_command}
commands =
    pytest reagent/test/prediction -n2


[testenv:circleci_world_model_unittest]
install_command = {[ubuntu_gpu]install_command}
commands =
    pytest reagent/test/world_model -n2
